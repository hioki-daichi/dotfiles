[atcoder]
submit_via_binary = true
update_interval = 1000
use_cross = true
binary_column = 80

[profile]
target = "x86_64-unknown-linux-musl"

[profile.release]
lto = true
panic = 'abort'

[dependencies]

[project]
rustc_version = "1.40.0"

template = """
#[allow(unused_macros)]
macro_rules! input {
    ($($r:tt)*) => {
        let mut s = String::new();
        use std::io::Read;
        std::io::stdin().read_to_string(&mut s).unwrap();
        let mut iter = s.split_whitespace();
        input_inner!{iter, $($r)*};
    };
}

#[allow(unused_macros)]
macro_rules! input_inner {
    ($iter:expr, $var:ident : $t:tt $($r:tt)*) => {
        let $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*};
    };
    ($iter:expr, mut $var:ident : $t:tt $($r:tt)*) => {
        let mut $var = read_value!($iter, $t);
        input_inner!{$iter $($r)*};
    };
    ($iter:expr, ) => {};
}

#[allow(unused_macros)]
macro_rules! read_value {
    ($next:expr, ( $($t:tt),* )) => {
        ( $(read_value!($next, $t)),* )
    };
    ($next:expr, [ $t:tt ; $len:expr ]) => {
        (0..$len).map(|_| read_value!($next, $t)).collect::<Vec<_>>()
    };
    ($iter:expr, $t:ty) => {{
        let v = $iter.next().unwrap();
        v.parse::<$t>().unwrap()
    }};
}

fn main() {
    unimplemented!();
}
"""
